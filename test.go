package main

import (
	"log"
	"os"
	"time"

	"context"
	"fmt"

	"github.com/chromedp/cdproto/page"
	"github.com/chromedp/chromedp"
)

func main() {
	html := `
	<html>
		<style>
			h1{
				text-align:center;
			}
		</style>
	  <body>
	    <h1>Hello, PDF!</h1>
	    <p>This is a test PDF generated by chromedp.</p>
		<img src="https://images.pexels.com/photos/674010/pexels-photo-674010.jpeg" />
	  </body>
	</html>
	`

	ctx, cancel := chromedp.NewContext(context.Background())
	defer cancel()

	ctx, cancel = context.WithTimeout(ctx, 20*time.Second)
	defer cancel()

	var pdfBuf []byte

	err := chromedp.Run(ctx,
		chromedp.Navigate("data:text/html,"+html),
		chromedp.WaitReady("body"),
		chromedp.Sleep(500*time.Millisecond),
		chromedp.ActionFunc(func(ctx context.Context) error {
			buf, _, err := page.PrintToPDF().
				WithPrintBackground(true).
				WithPaperWidth(8.5).
				WithPaperHeight(11).
				Do(ctx)
			if err != nil {
				return fmt.Errorf("failed to print to PDF: %w", err)
			}
			pdfBuf = buf
			return nil
		}),
	)
	if err != nil {
		log.Fatalf("PDF generation failed: %v", err)
	}

	output := "test_output.pdf"
	err = os.WriteFile(output, pdfBuf, 0644)
	if err != nil {
		log.Fatalf("Failed to write PDF: %v", err)
	}

	log.Printf("Test PDF generated successfully: %s", output)
}
